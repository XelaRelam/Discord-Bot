generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  bots          Bot[] /* User's Bots */
  user_id       String   @id @unique /* UserId */
  createdAt     DateTime @default(now()) /* User Joined Date */
  userBanned    Boolean  @default(false) /* If Bot is banned */
  hasAwaitedBot Boolean  @default(false) /* If user has a bot in queue */
}

model Bot {
  botId       String   @unique /* Bot ID */
  userId      String /* Developer ID */
  approvedBy  String /* Approved by ID */
  invite      Int      @default(0) /* Invite Permissions */
  createdAt   DateTime @default(now()) /* Date Added */
  addedAt     DateTime /* Date added to the server */
  library     String   @default("Unknown") /* Bot library */
  description String   @default("N/A") /* Bot Description */
  prefix      String   @default("/") /* Bot Prefix */
  botBanned   Boolean  @default(false) /* If Bot is banned */
  botAdded    Boolean  @default(false) /* If Bot is approved */
  botAwaiting Boolean  @default(false) /* If Bot is awaiting approval */

  user    User     @relation(fields: [userId], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  threads Thread[] @relation("ThreadBots")

  @@id([botId])
}

model Thread {
  threadId   String   @id /* Discord thread ID */
  userId     String /* User who owns the thread */
  createdAt  DateTime @default(now()) /* Thread creation date */
  lastActive DateTime @default(now()) /* Last activity timestamp */
  bots       Bot[]    @relation("ThreadBots") // Many-to-many relation with Bot

  @@index([lastActive])
}

model Starboard {
  id          String   @id @default(cuid()) // Unique identifier
  messageId   String   @unique // Original message ID
  starboardId String? // Starboard message ID (null if not posted yet)
  channelId   String // The channel where the original message was sent
  authorId    String // Message author
  starsCount  Int      @default(0) // Current star count
  createdAt   DateTime @default(now())
}

model StickyMessage {
  id        Int    @id @default(autoincrement())
  channelID String @unique
  messageID String
}
