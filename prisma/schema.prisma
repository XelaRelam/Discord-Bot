generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String   @id @unique
  createdAt     DateTime @default(now())
  userBanned    Boolean  @default(false)
  hasAwaitedBot Boolean  @default(false)
  hasLeftServer Boolean  @default(false)

  // Relations
  bots         Bot[]
  staffMember  StaffMember? @relation("UserToStaff")
  ratingsGiven Rating[]     @relation("RatingsByUser")
}

model Bot {
  botId       String   @unique /* Bot ID */
  userId      String /* Developer ID */
  approvedBy  String /* Approved by ID */
  invite      Int      @default(0) /* Invite Permissions */
  createdAt   DateTime @default(now()) /* Date Added */
  addedAt     DateTime /* Date added to the server */
  library     String   @default("Unknown") /* Bot library */
  description String   @default("N/A") /* Bot Description */
  prefix      String   @default("/") /* Bot Prefix */
  botBanned   Boolean  @default(false) /* If Bot is banned */
  botAdded    Boolean  @default(false) /* If Bot is approved */
  botAwaiting Boolean  @default(false) /* If Bot is awaiting approval */

  user    User     @relation(fields: [userId], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  threads Thread[] @relation("ThreadBots")

  @@id([botId])
}

model Thread {
  threadId   String   @id /* Discord thread ID */
  userId     String /* User who owns the thread */
  createdAt  DateTime @default(now()) /* Thread creation date */
  lastActive DateTime @default(now()) /* Last activity timestamp */
  bots       Bot[]    @relation("ThreadBots") // Many-to-many relation with Bot

  @@index([lastActive])
}

model Starboard {
  id          String   @id @default(cuid()) // Unique identifier
  messageId   String   @unique // Original message ID
  starboardId String? // Starboard message ID (null if not posted yet)
  channelId   String // The channel where the original message was sent
  authorId    String // Message author
  starsCount  Int      @default(0) // Current star count
  createdAt   DateTime @default(now())
}

model StickyMessage {
  id        Int    @id @default(autoincrement())
  channelID String @unique
  messageID String
}

model StaffMember {
  id          String          @id @default(cuid())
  userId      String          @unique
  user        User            @relation("UserToStaff", fields: [userId], references: [user_id])
  positions   StaffPosition[]
  ratings     Rating[]        @relation("RatingsForStaff")
  totalRating Float           @default(0)
  ratingCount Int             @default(0)
}

model Rating {
  id         String   @id @default(cuid())
  rating     Int
  transcript String
  createdAt  DateTime @default(now())

  staffId     String
  staffMember StaffMember @relation("RatingsForStaff", fields: [staffId], references: [id])

  userId String
  user   User   @relation("RatingsByUser", fields: [userId], references: [user_id])
}

model StaffPosition {
  id            String      @id @default(cuid())
  name          String // e.g. "JavaScript", "Python"
  staffMemberId String
  staffMember   StaffMember @relation(fields: [staffMemberId], references: [id])
}
